//最短无序连续子数组
/*
给定一个整数数组，你需要寻找一个连续的子数组，如果对这个子数组进行升序排序，那么整个数组都会变为升序排序。
你找到的子数组应是最短的，请输出它的长度。

示例 1:
输入: [2, 6, 4, 8, 10, 9, 15]
输出: 5
解释: 你只需要对 [6, 4, 8, 10, 9] 进行升序排序，那么整个表都会变为升序排序
*/

class Solution {
public:
    int findUnsortedSubarray(vector<int>& nums) {
       int start = 0, end = nums.size() - 1;
       vector<int> v(nums.begin(), nums.end());
       sort(v.begin(), v.end());
       while(start < end)
       {
           int flag = 1;//flag用来检验当前两位的值是否可以作为判断nums有序的位数
           if(nums[start] == v[start])
           {
               start++;
               flag = 0;//左右有任意一位满足有序循环都可以进行下去
           }
           if(nums[end] == v[end])
           {
               end--;
               flag = 0;
           }
           if(flag == 1)
           {
               break;
           }
       }
       if(start >= end)
       {
           return 0;
       }
       return end - start + 1;
    }
};



