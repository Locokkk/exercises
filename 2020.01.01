//寻找两个有序数组的中位数
/*
给定两个大小为 m 和 n 的有序数组 nums1 和nums2。
请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。
你可以假设 nums1 和 nums2 不会同时为空

nums1 = [1, 3]
nums2 = [2]
则中位数是 2.0

nums1 = [1, 2]
nums2 = [3, 4]
则中位数是 (2 + 3)/2 = 2.5
*/

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2)
    {
    if (nums1.size() == 0 && nums2.size() == 0)
    {
     return 0;
    }

    vector<double> vMerge;
    vMerge.insert(vMerge.end(), nums1.begin(), nums1.end());
    vMerge.insert(vMerge.end(), nums2.begin(), nums2.end());
    sort(vMerge.begin(), vMerge.end());

    if (vMerge.size() % 2 == 0)
    {
         return (vMerge[vMerge.size() / 2] + vMerge[(vMerge.size() / 2) - 1]) / 2;
    }
    else 
    {
         return vMerge[vMerge.size() / 2];
    }
  }
};
