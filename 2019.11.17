//最近公共祖先
//有一棵无穷大的满二叉树，其结点按根结点一层一层地从左往右依次编号，根结点编号为1。现在有两个结点a，b。请设计一个算法，求出a和b点的最近公共祖先的编号。
//给定两个int a,b。为给定结点的编号。请返回a和b的最近公共祖先的编号。注意这里结点本身也可认为是其祖先。
//思路：因为是满二叉树，父节点可以直接通过子节点除以二得出，这样将两个节点一直循环比较大小，大的除以二，直到两者相等，即找到了最近的公共祖先。

class LCA {
public:
    int getLCA(int a, int b) {
        while(a!=b)
        {
            if(a>b){
                a/=2;
            }
            if(b>a){
                b/=2;
            }
        }
        return a;
    }
};


//求最大连续bit数
//功能: 求一个byte数字对应的二进制数字中1的最大连续数，例如3的二进制为00000011，最大连续2个1
//思路：在最低位判断是否为一（通过&1操作），然后a每次右移一位，循环判断。

#include<iostream>
#include<string>
using namespace std;

int main()
{
    int a;
    while(cin>>a){
        int count=0,max=0;
        while(a){//a等于0说明剩下位全是0，没有判断意义，不必继续
            if(a&1){
                count++;
                if(count>max){
                    max=count;
                }
            }
             else{
                    count=0;
                }
                a=a>>1;//别忘了第一遍怎么没过的kkk
        }
        cout<<max<<endl;
    }
}


