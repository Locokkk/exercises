//二叉树最近公共祖先问题(递归写法)


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        /*递归分析：
           1.如果p、q分别在root的左右两侧，则root就是最近公共祖先
           2.如果都在root左侧，那么lowestCommonAncestor(TreeNode* root->left, p, q)
           3.如果都在root左侧，那么lowestCommonAncestor(TreeNode* root->right, p, q)
        边界值处理：
           1.如果root==null，说明没找到，return null
           2.如果root等于p或q，返回root
           3.如果左子树没找到，返回空，在右子树最先找到的就是最近公共祖先
           4.如果右子树没找到，返回空，在左子树最先找到的就是公共祖先
        */
        if(root == nullptr || root == p || root == q)
        {
            return root;
        }
        
        TreeNode* leftNode = lowestCommonAncestor(root->left, p, q);
        TreeNode* rightNode = lowestCommonAncestor(root->right, p, q);

        if(leftNode == nullptr)
        {
            return rightNode;
        }
        if(rightNode == nullptr)
        {
            return leftNode;
        }

        return root;
    }
};


