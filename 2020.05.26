//word1到word2的最小编辑距离---动态规划

class Solution {
public:
    /**
     * 
     * @param word1 string字符串 
     * @param word2 string字符串 
     * @return int整型
     */
    int minDistance(string word1, string word2) {
        // write code here
        int len1 = word1.size();
        int len2 = word2.size();
        vector<vector<int> > res(len1 + 1, vector<int>(len2 + 1, 0));
        //状态：F(i, j)：word1的前i个字符到word2的前j个字符最小编辑距离
        //初始化
        for(int i = 0; i < len1 + 1; ++i)
        {//word1的i个字符到word2的0个字符---删除i个字符
            res[i][0] = i;
        }
        for(int j = 0; j < len2 + 1; ++j)
        {//word1的0个字符到word2的j个字符---插入j个字符
            res[0][j] = j;
        }
        /*插入：F(i, j - 1) + 插入word2的第j个字符
          删除：F(i - 1, j) + 删除word1的第i个字符
          修改：F(i - 1, j - 1) + word1[i] == word2[j] ? 0 : 1
          转移方程：F(i, j) = min(插入， 删除，修改)
          F(i, j) = min(F(i, j - 1) + 1, F(i - 1, j) + 1, F(i - 1, j - 1) + word1[i] == word2[j] ? 0 : 1)
        */
        for(int i = 1; i < len1 + 1; ++i)
        {
            for(int j = 1; j < len2 + 1; ++j)
            {
                res[i][j] = min(res[i][j - 1], res[i - 1][j]) + 1;
                if(word1[i - 1] == word2[j - 1])
                {//注意这里的判断条件，比较第i个字符和第j个字符，但是下标-1处理
                    res[i][j] = min(res[i][j], res[i - 1][j - 1]);
                }
                else
                {
                    res[i][j] = min(res[i][j], res[i - 1][j - 1] + 1);
                }
            }
        }
        //返回值：res[len1][len2]----word1的len1转换到word2的len2需要的最小编辑距离
        return res[len1][len2];
    }
};

