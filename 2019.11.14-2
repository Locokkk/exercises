//求最小公倍数

#include<iostream>
using namespace std;
int main()
{
    int A,B;
    while(cin>>A>>B)
    {
        if(A==0||B==0)
        {
            cout<<0<<endl;
        }
        if(A<B)
        {
            int tmp=A;
            A=B;
            B=tmp;
        }
        for(int i=A;i<=A*B;i++)
        {
            if(i%A==0&&i%B==0)
            {
                cout<<i<<endl;
                break;//记得break
            }
        }
    }
    return 0;
}



//两种排序方法

//两种字符串的排序方法： 
//1.根据字符串的字典序排序。例如：
//"car" < "carriage" < "cats" < "doggies < "koala"
//2.根据字符串的长度排序。例如：
//"car" < "cats" < "koala" < "doggies" < "carriage"
//考拉想知道自己的这些字符串排列顺序是否满足这两种排序方法

//输入：输入第一行为字符串个数n(n ≤ 100)，接下来的n行,每行一个字符串,字符串长度均小于100，均由小写字母组成
//输出：如果这些字符串是根据字典序排列而不是根据长度排列输出"lexicographically"
//如果根据长度排列而不是字典序排列输出"lengths"
//如果两种方式都符合输出"both"，否则输出"none"

#include<iostream>
#include<string>
#include<vector>
using namespace std;
vector<string> vec;

bool dictionary_sort()
{//字典排列的判断
    size_t i=0;
    string s;
    while(i+1<vec.size())
    {
        if(vec[i].compare(vec[i+1])>0)
        {
            return 0;
        }
        i++;
    }
    return 1;
}

bool length_sort()
{//长度排列的判断
    size_t i=0;
    while(i+1<vec.size())
    {
        if(vec[i].size()>vec[i+1].size())
        {
            return 0;
        }
        i++;
    }
    return 1;
}

int main()
{
    int n;
    string s;
    int ret1,ret2;
    cin>>n;
    for(int i=0;i<n;i++)
    {
        cin>>s;
        vec.push_back(s);
    }
    ret1=dictionary_sort();
    ret2=length_sort();
    if(ret1&&!ret2)
    {
        cout<<"lexicographically"<<endl;
    }
    else if(!ret1&&ret2)
    {
        cout<<"lengths"<<endl;
    }
    else if(ret1&&ret2)
    {
        cout<<"both"<<endl;
    }
    else{
        cout<<"none"<<endl;
    }
    return 0;
}




