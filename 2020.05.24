//回文串分割的最小次数------动态规划

class Solution {
public:
    /**
     * 
     * @param s string字符串 
     * @return int整型
     */
    bool isPal(string s, int a, int b)
    {
        while(a <= b)
        {
            if(s[a] != s[b])
            {
                return false;
            }
            a++;
            b--;
        }
        return true;
    }
    int minCut(string s) {
        // write code here
        if(s.empty())
            return 0;
        vector<int> v;
        int len = s.size();
        for(int i = 0; i < len; ++i)
        {
            v.push_back(i);
        }
        for(int i = 1; i < len; ++i)
        {
            //对于每个第i步，都要判断当前整个串是否为回文串，若是，则把当前状态置为0，对于这个i的接下来就不用执行了
            if(isPal(s, 0, i))
            {
                v[i] = 0;
                continue;
            }
            for(int j = i - 1; j >= 0; --j)
            {
                if(isPal(s, j + 1, i))
                {//体会：这里的v[i]是在不断更新的
                    v[i] = min(v[i], v[j] + 1);
                }
            }
        }
        return v[len - 1];
    }
};






//优化
//把每个子串是否为回文串的判断保存，不用每次都判断，减小时间复杂度
class Solution {
public:
    /**
     * 
     * @param s string字符串 
     * @return int整型
     */
    vector<vector<bool> > isPalArray(string s)
    {
        //由于当前算法对于每个i都要不断判断子串是否为回文串，所以直接把所有子串是否为回文串存进数组，直接取值
        int len = s.size();
        vector<vector<bool> > res(len, vector<bool>(len, false));
        for(int i = len - 1; i >= 0; --i)
        {
            for(int j = i; j < len; ++j)
            {
                if(i == j)
                    res[i][i] = true;
                else if(i + 1 == j)
                    res[i][j] = (s[i] == s[j]);
                else
                    res[i][j] = (s[i] == s[j] && res[i + 1][j - 1]);
            }
        }
        return res;
    }
    int minCut(string s) {
        // write code here
        vector<vector<bool> > res = isPalArray(s);
        if(s.empty())
            return 0;
        vector<int> v;
        int len = s.size();
        for(int i = 0; i <= len; ++i)
        {
            v.push_back(i - 1);
        }
        for(int i = 1; i <= len; ++i)
        {
            for(int j = 0; j < i; ++j)
            {
                if(res[j][i - 1])
                    v[i] = min(v[i], v[j] + 1);
            }
        }
        return v[len];
    }
};
