//二叉树的最近公共祖先

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool find(TreeNode* root, TreeNode* ret)
    {
        if(root == nullptr)
        {
            return false;
        }
        if(root == ret)
        {
            return true;
        }
        return find(root->left, ret) || find(root->right, ret);
    }

    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root == nullptr || root == p ||root == q)
        {
            return root;
        }
        bool ispLeft = find(root->left, p);//记得传左节点进去，不是传root，以免发生错误
        bool ispRight = !ispLeft;

        bool isqLeft = find(root->left, q);//因为节点进去也会比较
        bool isqRight = !isqLeft;
        //一左一右或者一右一左都可以
        if((ispLeft && isqRight) || (ispRight && isqLeft))
        {
            return root;
        }
        //都在左去左边找
        if(ispLeft && isqLeft)
        {
            return lowestCommonAncestor(root->left, p, q);
        }
        //都在右去右边找
        if(ispRight && isqRight)
        {
            return lowestCommonAncestor(root->right, p, q);
        }
        return nullptr;
    }
};

