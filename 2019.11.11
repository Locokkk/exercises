//连续最大和

//一个数组有 N 个元素，求连续子数组的最大和。 例如：[-1,2,1]，和最大的连续子数组为[2,1]，其和为 3
#include <iostream>
using namespace std;
int main(){
    int n,curSum=0,maxSum=-1e5;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
        curSum+=arr[i];
        if(curSum>maxSum){
            maxSum=curSum;
        }
        if(curSum<0){
            curSum=0;
        }
    }
    cout<<maxSum<<endl;
    return 0;
}

//统计回文

//将字符串B插入字符串A使产生的字符串是一个回文串。寻找有多少种插入办法可以使新串是一个回文串。如果字符串B插入的位置不同就考虑为不一样的办法。

//例如：
//A = “aba”，B = “b”。这里有4种把B插入A的办法：
//* 在A的第一个字母之前: "baba" 不是回文 
//* 在第一个字母‘a’之后: "abba" 是回文 
//* 在字母‘b’之后: "abba" 是回文 
//* 在第二个字母'a'之后 "abab" 不是回文 
//所以满足条件的答案为2(输出一个数字，表示把字符串B插入字符串A之后构成一个回文串的方法数)

#include<iostream>
#include<string>
using namespace std;
bool Huiwen(string str1)   //判断回文
    {
    int length=str1.length();
    for(int i=0;i<length;i++)
        {
        if(str1[i]!=str1[length-1])
            return false;
        length=length-1;
         }
    return true;
     }
int main()
  {
    string str1,str2,temp;
    int count,len;
    while(cin>>str1>>str2)
    {
        count = 0;
        temp=str1;
        len=str1.length()+1;
        for(int i=0;i<len;i++)
        {
            str1=temp;
            str1.insert(i,str2);   //在A字符串中以此插入B字符串
            if(Huiwen(str1))       //判断是否是回文
                count=count+1;    //统计回文    
        }
        cout<<count<<endl;
    }
    return 0;
  }



